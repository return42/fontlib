# -*- coding: utf-8; mode: makefile-gmake -*-

PROJECT      =  $(PYOBJECTS)
0_BUILD_DEST =  0_build
0_PY_ENV     =  local/0env
0_GIT        =  git --no-pager
0_ROOT       := $(shell git rev-parse --show-toplevel)

zero.rst:
	cat $(abspath $(lastword $(MAKEFILE_LIST))) | grep '^##' | sed 's/^## \?//'

## .. -*- coding: utf-8; mode: rst-mode -*-
##
## .. _makefile.0:
##
## ===========================
## Makefile: 0-build workflows
## ===========================
##
## The ``makefile.0`` brings some handy makefile variables, rules and macros
## suitable for 0-build (aka 0-Day) workflows.
##
## build scope:
##
## - `zero target`_  && `COMMIT variable`_
## - `zero.build target`_
##
## build tracking:
##
## - `0.commit target`_
## - `0.status target`_
## - `0.clean target`_ & `0_BUILD_KEEP variable`_
## - `0.drop target`_
##
## build environment:
##
## - `0.env target`_
## - `0.env_drop`_
##
## Read on chapter `zero target`_ and `zero.build target`_ to see how to add
## your targets to 0-build workflows.  A simple example might be the build and
## the test of your software::
##
##     zero.build::
##             build-my-software_log-to_stdout > $(0_BUILD_DEST)/build_output.log
##             run-my-tests_log-to_stdout      > $(0_BUILD_DEST)/test_output.log
##
## With that example given, a simple workflow to track a diff in your build &
## test is::
##
##   $ make COMMIT=HEAD zero   # baseline is HEAD
##   $ make 0.commit           # commit zero baseline
##   $ make zero 0.status      # build with current working tree changes
##
##
## zero target
## ===========
##
## The 'zero' target is the main target, it builds all the 'zero.build' rules,
## read on `zero.build target`_ to see, how to add your targets to the
## 'zero.build' rule.
##
PHONY += zero
ifneq ($(PY_ENV),$(0_PY_ENV))
zero:
	@echo "  ZERO START target --> $@"
	@$(MAKE) PY_ENV=$(0_PY_ENV) zero
else
zero:  zero.env_drop zero.build
	$(Q)echo "  ZERO END   build with worktree $(0_BUILD_WTREE) commit: $(shell cd $(0_BUILD_WTREE); $(0_GIT) rev-parse --short HEAD)"
endif

## wrap target 0.% --> zero.%
## ==========================
##
## Zero build targets need special 0_PY_ENV environment, therefore the
## (external) ``0.%`` targets are wrapped to a (internal) makefile call
## ``zero.%``.
##
ifneq ($(PY_ENV),$(0_PY_ENV))
0.%:
	@echo "  ZERO start $@ --> $(patsubst 0.%,zero.%,$@)"
	$(Q)$(MAKE) -s PY_ENV=$(0_PY_ENV) $(patsubst 0.%,zero.%,$@)
	@echo "  ZERO end   $@"
endif

## COMMIT variable
## ===============
##
## Variable that holds the commit value of the commit which should be used for
## the 0-build.  To use the current working tree use ``.``, which is also the
## default.  Valid values for the commit e.g. are ``@{-1}``, ``aacf4a760a1`` or
## ``HEAD~~``.
##
COMMIT = .

## 0_BUILD_KEEP variable
## =====================
##
## When target 0.clean_ is called, everything is deleted, except those path
## names listed in $(0_BUILD_KEEP).  In your Makefile, add more files to keep
## with::
##
##   0_BUILD_KEEP += hello.txt
##
0_BUILD_KEEP  = .git .gitignore
0_BUILD_CLEAN = \
    $(filter-out $(0_BUILD_KEEP),\
        $(patsubst $(0_BUILD_DEST)/%,\
            %,$(wildcard $(0_BUILD_DEST)/* $(0_BUILD_DEST)/.[^.]*)))

## 0_BUILD_WTREE variable
## ======================
##
## If ``COMMIT==.`` use the working tree we are in. In any other case, checkout
## commit $(COMMIT) into working tree at: ./build/0_build_worktree.
##
ifeq ($(strip $(COMMIT)),.)
0_BUILD_WTREE = .
else
0_BUILD_WTREE = ./build/0_build_worktree
endif

$(0_BUILD_DEST)/.git:
	$(Q){ \
	mkdir -p $(0_BUILD_DEST) ;\
	cd $(0_BUILD_DEST) ;\
	touch .gitignore ;\
	$(0_GIT) init ;\
	$(0_GIT) add --all ;\
	$(0_GIT) commit -m "[0-build inital]" ;\
	}

ifeq ($(PY_ENV),$(0_PY_ENV)) # ---- START: define zero.% targets ----------

## 0.clean target
## ==============
##
## Delete all files and folders in $(0_BUILD_DEST) who are listed in
## $(0_BUILD_CLEAN), which are all path names in the root folder except those
## listed in $(0_BUILD_KEEP)
##
PHONY += zero.clean
zero.clean:: zero.env_drop
	@echo "  ZERO      clean $(0_BUILD_DEST)/* ..."
	@$(if $(0_BUILD_CLEAN), echo -n '           ')
	$(Q)for FILE in ${0_BUILD_CLEAN}; do echo -n " $$FILE" ; rm -rf $(0_BUILD_DEST)/$$FILE; done
	@$(if $(0_BUILD_CLEAN), echo)

## 0.drop target
## =============
##
## Drop the whole 0-build environment and the repository
##
zero.drop:: zero.env_drop
	@echo "  ZERO      drop$(0_BUILD_DEST)"
	$(Q)rm -rf $(0_BUILD_DEST)


## zero.build target
## =================
##
## The target zero.build is defined as a `double colon
## <https://www.gnu.org/software/make/manual/html_node/Double_002dColon.html>`__
## rule.  To extend the zero.build rules just add them to your makefile by using
## double colon.  E.g. to add the output of a *dummy* build to the scope of your
## zero builds define a double colon target like the following::
##
##     zero.build::
##             @echo "dummy zero.build output" > $(0_BUILD_DEST)/dummy_build_output.log
##
PHONY += zero.build
zero.build:: zero.clean zero.env
	@echo "  ZERO-ENV  OK"

## 0.commit target
## ===============
##
## Commit current working tree in 0_BUILD_DEST_.
##
PHONY += zero.commit
zero.commit:
	$(Q){ \
        cd $(0_ROOT)/$(0_BUILD_WTREE) ;\
        wt_rev=$$($(0_GIT) log --pretty=format:'[$(0_PROJECT) %h] %s (%ci) <%an>' --abbrev-commit  -1) ;\
        cd $(0_ROOT)/$(0_BUILD_DEST) ;\
	$(0_GIT) add --all .;\
	$(0_GIT) commit -m "$$wt_rev" ;\
	}

## 0.status target
## ===============
##
## show current status of the working tree in 0_BUILD_DEST_.
##
PHONY += zero.status
zero.status:
	{ \
        cd $(0_BUILD_DEST);\
	$(0_GIT) status -s;\
	}

## 0.env target
## ============
##
## Target to build the environment for the 0-build run.
##
PHONY += zero.env
zero.env: | sphinx-doc $(0_BUILD_DEST)/.git
ifneq ($(strip $(0_BUILD_WTREE)),.)
	@echo "  ZERO-ENV  checkout worktree $(0_BUILD_WTREE) $(COMMIT)"
	$(Q)$(0_GIT) worktree add --checkout $(0_BUILD_WTREE) $(COMMIT)
	$(Q)$(0_GIT) worktree list #--porcelain
endif
	@echo "  ZERO-ENV  install $(PYOBJECTS) :: origin located at '$(0_BUILD_WTREE)'"
	$(Q)$(PY_ENV_BIN)/pip --no-color $(PIP_VERBOSE) install -e $(0_BUILD_WTREE)

## 0.env_drop target
## =================
##
## Target to drop old build environment.  This will not drop the whole
## virtualenv $(0_PY_ENV), only the $(PYOBJECTS) will be uninstalled and the
## $(0_BUILD_WTREE) will be deleted (except it is the local workspace '.').
##
PHONY += zero.env_drop
zero.env_drop:
	@echo "  ZERO-ENV  uninstall py-package '$(PYOBJECTS)' from $(PY_ENV)"
	$(Q)[ -d $(PY_ENV_BIN) ] && $(PY_ENV_BIN)/pip --no-color $(PIP_VERBOSE) uninstall --yes $(PYOBJECTS) || true
ifneq ($(strip $(0_BUILD_WTREE)),.)
	@echo "  ZERO-ENV  drop worktree $(0_BUILD_WTREE)"
	$(Q)rm -rf '$(0_BUILD_WTREE)'
	$(Q)$(0_GIT) worktree prune
endif

endif # ---- END: define zero.% targets ----------


## Debug stuff
## ===========
##
## Only usefully within Makefile development.
##
## zero.dump
## ---------
##
## Makefile target to print a dump message (prints ZERO_DUMP_).
##
PHONY += zero.dump
zero.dump::
	$(call zero_dump,$@,$(ZERO_DUMP))

## ZERO_DUMP variable
## ------------------
##
## ZERO_DUMP: template with dump message.
##
define ZERO_DUMP
PROJECT        : $(PROJECT)
COMMIT         : $(COMMIT)
PYOBJECTS      : $(PYOBJECTS)
PY_ENV         : $(PY_ENV)
0_PY_ENV       : $(0_PY_ENV)
0_BUILD_WTREE  : $(0_BUILD_WTREE)
0_BUILD_DEST   : $(0_BUILD_DEST)
0_BUILD_KEEP   : $(0_BUILD_KEEP)
endef

## zero_dump macro
## ---------------
##
## Makefile makro to print a dump message, usage::
##
##   $(zero_dump,<action-name>,<action-output>)
##
zero_dump=$(info $(call ZERO_DUMP_MSG,$1,$2))
define ZERO_DUMP_MSG
  ZERO-DUMP  $(1)
$(2)
endef


